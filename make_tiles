#!/bin/sh -eu

# Update tiles.

# - use borders from brd/*.gpx
# - for each border render files which are touching the border
# - skip files if they are older then tile.list, older then the border
#   file, and no --all option is given.
# - render with --add switch: add information to existing tiles
# - render with --tmap_scale 1: rescale larger tiles to smaller ones.
# - do separately for zoom 9..12 and 0..8

MS2MAPDB=ms2mapdb
MS2NOM=ms2nom
tlist=TILES/tile.list
vmap_cnf=conf/import_vmap.cfg

mkdir -p TILES

all=0
if [ "${1:-}" = "--all" ]; then
  shift
  all=1
fi

need_upd=0
files=${@:-vmap/*.vmap}

# For each border file
for brd_file in brd/*.gpx; do
  [ -f "$brd_file" ] || continue
    echo "Border: $brd_file"

  # For each map file
  for vmap in $files; do
    [ -f "$vmap" ] || continue
    name=$(basename $vmap .vmap)
    nom=$(./map_get_nom $name)

    # Is the file touches the border?
    $($MS2NOM --ext --name "$nom" --cover "$brd_file") || continue

    # Skip if vmap older then tile.list AND
    # border older then tile.list and no --all option is given:
    if [ "$vmap" -ot "$tlist" -a "$brd_file" -ot "$tlist" -a "$all" = 0 ]; then
      continue
    fi

    echo "Rendering: $name"

    # update mapdb if needed
    mapdb=mapdb/$name
    if [ "$mapdb/objects.db" -ot "$vmap" -o "$mapdb/objects.db" -ot "$vmap_cnf" ]; then
      echo "Update mapdb: $name"
      $MS2MAPDB delete $mapdb
      $MS2MAPDB create $mapdb
      $MS2MAPDB import_vmap $mapdb $vmap --config "$vmap_cnf"
    fi

    $MS2MAPDB render $mapdb --config conf/render.cfg\
      --define "{\"nom_name\":\"$name\", \"hr\":\"0\", \"border_style\":\"none\"}"\
      --tmap --add --out "TILES/{x}-{y}-{z}.png" --zmin 7 --zmax 14\
      --bgcolor 0 --png_format argb \
      --border_file $brd_file\
      --tmap_scale 1 --fit_patt_size;\

    $MS2MAPDB render $mapdb --config conf/render.cfg\
      --define "{\"nom_name\":\"$name\", \"hr\":\"0\", \"border_style\":\"none\"}"\
      --tmap --add --out "TILES/{x}-{y}-{z}.png" --zmin 0 --zmax 6\
      --bgcolor 0 --png_format argb \
      --border_file $brd_file\
      --tmap_scale 1 --mapdb_minsc 1;\

    need_upd=1
  done

done

if [ "$need_upd" = 1 ]; then
  find TILES/ -name '*.png' | xargs md5sum | sed 's| TILES/| |' > $tlist
fi
