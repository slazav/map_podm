#!/bin/bash -eu

# Скрипт создаёт файлы стандартного формата MBTiles, а также sqlitedb для OSMAnd

SQLITEDB=slazav.sqlitedb                # Имя файла с картами для OSM
MBTILES=slazav.mbtiles                  # Имя файла с картами в формате MBTiles
NUMCPU=`cat /proc/cpuinfo | grep process | wc -l`	# Определяем число процессоров

TILES_DB_DIR=TILES_DB
MS2MAPDB=ms2mapdb
MS2NOM=ms2nom
vmap_cnf=conf/import_vmap.cfg

if [ ! -f conf/pics/redk.png ]; then
	echo Не найдены файлы шаблонов
	echo Выполните команду make в папке conf/pics/
	exit 1
fi

pngquant -h >/dev/null ||
  (echo Поставьте программу pngquant, которая используется для оптимизации файлов плиток
  exit 1)

rm -rf $TILES_DB_DIR
mkdir -p $TILES_DB_DIR
mkdir -p mapdb/

files=${@:-vmap/*.vmap}

# For each border file
for brd_file in brd/*.gpx; do
  # For each map file
  for vmap in $files; do
    [ -f "$vmap" ] || continue
    name=$(basename $vmap .vmap)
    nom=$(./map_get_nom $name)

    # Is the file touches the border?
    $($MS2NOM --ext --name "$nom" --cover "$brd_file") || continue

	echo "Отрисовываем карту $name"
    # update mapdb if needed
    mapdb=mapdb/$name
    $MS2MAPDB delete $mapdb
    $MS2MAPDB create $mapdb
    $MS2MAPDB import_vmap $mapdb $vmap --config "$vmap_cnf"

    $MS2MAPDB render $mapdb --config conf/render.cfg\
      --define "{\"nom_name\":\"$name\", \"hr\":\"0\", \"border_style\":\"clip\"}"\
      --tmap --add --out "$TILES_DB_DIR/{z}/{x}-{y}.png" --zmin 7 --zmax 14\
      --bgcolor 0 --png_format argb\
      --border_file $brd_file\
      --tmap_scale 1 --fit_patt_size

    $MS2MAPDB render $mapdb --config conf/render.cfg\
      --define "{\"nom_name\":\"$name\", \"hr\":\"0\", \"border_style\":\"clip\"}"\
      --tmap --add --out "$TILES_DB_DIR/{z}/{x}-{y}.png" --zmin 0 --zmax 6\
      --bgcolor 0 --png_format argb\
      --border_file $brd_file\
      --tmap_scale 1 --mapdb_minsc 1

    wait
  done
done

cd $TILES_DB_DIR

echo Оптимизируем плитки с помощью pngquant
find . -type f -name '*.png' | xargs -P $NUMCPU -n 1 pngquant --strip --nofs --skip-if-larger -f --ext .png || echo -n

echo Записываем плитки в готовые файлы

# Создадим пустые базы обоих типов
sqlite3 $SQLITEDB 'CREATE TABLE tiles (x int, y int, z int, image blob,
  PRIMARY KEY (x,y,z));'
sqlite3 $MBTILES 'CREATE TABLE tiles (tile_column int, tile_row int,
  zoom_level int, tile_data blob,
  PRIMARY KEY (tile_column, tile_row, zoom_level));'

# Запишем плитки в файл sqlitedb
find . -type f -name '*.png' | sed "y|/-.|   |" | \
(
echo 'PRAGMA journal_mode = OFF; PRAGMA synchronous = 0;'
while read tile; do
  read z x y ignore <<< $tile
  echo -n "INSERT INTO tiles (x, y, z, image) VALUES "
  echo     "($x, $y, $z, readfile('${z}/${x}-${y}.png'));"
done ) | sqlite3 $SQLITEDB

# Запишем плитки в файл mbtiles
find . -type f -name '*.png' | sed "y|/-.|   |" | \
(
echo 'PRAGMA journal_mode = OFF; PRAGMA synchronous = 0;'
while read tile; do
  read z x y ignore <<< $tile
  echo -n "INSERT INTO tiles (tile_column, tile_row, "
  echo -n "zoom_level, tile_data) VALUES "
  echo    "($x, $((2**z-1-y)), $z, readfile('${z}/${x}-${y}.png'));"
done ) | sqlite3 $MBTILES

# Создадим ещё по одной нужной таблице в sqlitedb и mbtiles
sqlite3 $SQLITEDB "CREATE TABLE info (tilenumbering text, minzoom int,
  maxzoom int);"
sqlite3 $SQLITEDB "INSERT INTO info (tilenumbering, minzoom, maxzoom)
  VALUES ('', (SELECT min(z) FROM tiles), (SELECT max(z) FROM tiles))"
sqlite3 $MBTILES "CREATE TABLE metadata (format text, minzoom int,
  maxzoom int);"
sqlite3 $MBTILES "INSERT INTO metadata (format, minzoom, maxzoom)
  VALUES ('png', (SELECT min(zoom_level) FROM tiles),
  (SELECT max(zoom_level) FROM tiles))"

cd -
